import cv2
import winsound
import time

# Load OpenCV's built-in face detector
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + "haarcascade_frontalface_default.xml")

# Initialize webcam
webcam = cv2.VideoCapture(0)

# For motion detection
ret, prev_frame = webcam.read()
prev_gray = cv2.cvtColor(prev_frame, cv2.COLOR_BGR2GRAY)
prev_gray = cv2.GaussianBlur(prev_gray, (5, 5), 0)

last_alert = 0
alert_cooldown = 5  # seconds

print("üîí Smart Security Camera Active...")

while True:
    ret, frame = webcam.read()
    if not ret:
        break

    # Convert to grayscale
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # -----------------------
    # FACE DETECTION
    # -----------------------
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(60, 60))

    # -----------------------
    # MOTION DETECTION
    # -----------------------
    gray_blur = cv2.GaussianBlur(gray, (5, 5), 0)
    diff = cv2.absdiff(prev_gray, gray_blur)
    _, thresh = cv2.threshold(diff, 25, 255, cv2.THRESH_BINARY)
    contours, _ = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
    motion_detected = any(cv2.contourArea(c) > 2500 for c in contours)
    prev_gray = gray_blur

    current_time = time.time()

    # -----------------------
    # ALERT LOGIC
    # -----------------------
    if len(faces) > 0 and current_time - last_alert > alert_cooldown:
        print("üö® ALERT: Human Detected!")
        winsound.Beep(1200, 500)  # higher pitch for human
        last_alert = current_time
        timestamp = time.strftime("%Y%m%d-%H%M%S")
        cv2.imwrite(f"human_{timestamp}.jpg", frame)

    elif motion_detected and len(faces) == 0 and current_time - last_alert > alert_cooldown:
        print("‚ö†Ô∏è ALERT: Motion Detected!")
        winsound.Beep(800, 300)  # lower pitch for motion
        last_alert = current_time
        timestamp = time.strftime("%Y%m%d-%H%M%S")
        cv2.imwrite(f"motion_{timestamp}.jpg", frame)

    # Draw rectangles for faces
    for (x, y, w, h) in faces:
        cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 0, 255), 2)
        cv2.putText(frame, "Human Detected", (x, y - 10),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 0, 255), 2)

    # Show live camera feed
    cv2.imshow("Smart Security Camera", frame)

    # Exit on ESC key
    if cv2.waitKey(10) == 27:
        break

webcam.release()
cv2.destroyAllWindows()
